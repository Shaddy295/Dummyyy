import React, { useState, useEffect } from 'react';
import {
  FaPlus,
  FaEdit,
  FaTrash,
  FaSave,
  FaTimes,
  FaSort,
  FaColumns,
  FaLayerGroup,
  FaSearch,
  FaEye,
  FaDownload,
} from 'react-icons/fa';
import './TableWithAddEditRow.css';

const generateDummyData = () => {
  const dummyData = [];
  for (let i = 1; i <= 50; i++) {
    dummyData.push({
      id: i,
      ipAddress: `192.168.1.${i}`,
      aucode: `AU${i}`,
      locationId: `LOC${i}`,
      macAddress: `00:1A:2B:3C:4D:${(i % 100).toString().padStart(2, '0')}`,
      site: `Site ${i}`,
      status: i % 2 === 0 ? 'Active' : 'Inactive',
      action: `Action ${i}`,
    });
  }
  return dummyData;
};

const TableWithAddEditRow = () => {
  const [rows, setRows] = useState([]);
  const [newRow, setNewRow] = useState({});
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [showNewRowInput, setShowNewRowInput] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortDirection, setSortDirection] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [columnVisibility, setColumnVisibility] = useState({
    ipAddress: true,
    aucode: true,
    locationId: true,
    macAddress: true,
    site: true,
    status: true,
    action: true,
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [showSearch, setShowSearch] = useState(false);
  const [selectAll, setSelectAll] = useState(false);
  const [selectedRows, setSelectedRows] = useState([]);
  const [showPreview, setShowPreview] = useState(false);
  const [rowHeight, setRowHeight] = useState('normal');

  useEffect(() => {
    const initialData = generateDummyData();
    setRows(initialData);
  }, []);

  const handleInputChange = (e, setFunction) => {
    const { name, value } = e.target;
    setFunction((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddRow = (index) => {
    setShowNewRowInput(index);
    setNewRow({});
  };

  const handleSaveNewRow = () => {
    setRows((prev) => {
      const newRows = [...prev];
      newRows.splice(showNewRowInput + 1, 0, { id: prev.length + 1, ...newRow });
      return newRows;
    });
    setShowNewRowInput(false);
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
  };

  const handleSaveEditRow = () => {
    setRows((prev) => prev.map((row) => (row.id === editRowId ? editRowData : row)));
    setEditRowId(null);
  };

  const handleDeleteRow = (rowId) => {
    setRows((prev) => prev.filter((row) => row.id !== rowId));
  };

  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const applySort = (data) => {
    if (sortColumn && sortDirection) {
      return [...data].sort((a, b) => {
        const columnA = a[sortColumn];
        const columnB = b[sortColumn];
        if (sortDirection === 'asc') {
          if (columnA < columnB) return -1;
          if (columnA > columnB) return 1;
          return 0;
        } else {
          if (columnA > columnB) return -1;
          if (columnA < columnB) return 1;
          return 0;
        }
      });
    }
    return data;
  };

  const handleChangePage = (page) => {
    setCurrentPage(page);
  };

  const handleColumnVisibilityChange = (column) => {
    setColumnVisibility((prev) => ({ ...prev, [column]: !prev[column] }));
  };

  const handleToggleSearch = () => {
    setShowSearch(!showSearch);
    setSearchTerm('');
  };

  const handleSearch = () => {
    if (!searchTerm) return rows;
    return rows.filter((row) =>
      Object.values(row).some(
        (value) =>
          typeof value === 'string' && value.toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  };

  const handleSelectRow = (rowId) => {
    const index = selectedRows.indexOf(rowId);
    if (index === -1) {
      setSelectedRows((prev) => [...prev, rowId]);
    } else {
      setSelectedRows((prev) => prev.filter((id) => id !== rowId));
    }
  };

  const handleSelectAllRows = () => {
    if (selectAll) {
      setSelectedRows([]);
    } else {
      setSelectedRows(rows.map((row) => row.id));
    }
    setSelectAll(!selectAll);
  };

  const filteredRows = handleSearch();
  const sortedRows = applySort(filteredRows);
  const lastIndex = currentPage * itemsPerPage;
  const firstIndex = lastIndex - itemsPerPage;
  const visibleRows = sortedRows.slice(firstIndex, lastIndex);
  const totalPages = Math.ceil(sortedRows.length / itemsPerPage);

  const handlePreview = () => {
    setShowPreview(true);
  };

  const handleClosePreview = () => {
    setShowPreview(false);
  };

  const handleDownload = () => {
    alert('Implement download functionality');
  };

  const handleItemsPerPageChange = (value) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };

  const handleDensityChange = (density) => {
    setRowHeight(density);
  };

  return (
    <div>
      <div className="table-controls">
        <button className="preview-btn" onClick={handlePreview}>
          <FaEye /> Preview
        </button>
        <div className="dropdown">
          <button className="dropbtn">
            <FaSort /> Sort
          </button>
          <div className="dropdown-content sort-dropdown">
            {Object.keys(columnVisibility).map((column) =>
              columnVisibility[column] ? (
                <label key={column}>
                  <input
                    type="checkbox"
                    checked={sortColumn === column}
                    onChange={() => handleSort(column)}
                  />{' '}
                  {column}
                </label>
              ) : null
            )}
          </div>
        </div>
        <div className="dropdown">
          <button className="dropbtn">
            <FaColumns /> Manage Columns
          </button>
          <div className="dropdown-content">
            {Object.keys(columnVisibility).map((column) => (
              <label key={column}>
                <input
                  type="checkbox"
                  checked={columnVisibility[column]}
                  onChange={() => handleColumnVisibilityChange(column)}
                />{' '}
                {column}
              </label>
            ))}
          </div>
        </div>
        <div className="dropdown density-dropdown">
          <button className="dropbtn density-btn">
            <FaLayerGroup /> Density
          </button>
          <div className="dropdown-content">
            <select onChange={(e) => handleDensityChange(e.target.value)}>
              <option value="compact">Compact</option>
              <option value="dense">Dense</option>
              <option value="normal">Normal</option>
            </select>
          </div>
        </div>
        <div className="search-container">
          {!showSearch && (
            <button className="search-btn" onClick={handleToggleSearch}>
              <FaSearch /> Search
            </button>
          )}
          {showSearch && (
            <input
              type="text"
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          )}
        </div>
      </div>

      <table className={`asset-table ${rowHeight}`}>
        <thead>
          <tr>
            <th>
              <input
                type="checkbox"
                checked={selectAll}
                onChange={handleSelectAllRows}
              />
            </th>
            {columnVisibility.ipAddress &&  (
              <th onClick={() => handleSort('ipAddress')}>
                IP Address {sortColumn === 'ipAddress' && <FaSort />}
              </th>
            )}
            {columnVisibility.aucode && (
              <th onClick={() => handleSort('aucode')}>
                AU Code {sortColumn === 'aucode' && <FaSort />}
              </th>
            )}
            {columnVisibility.locationId && (
              <th onClick={() => handleSort('locationId')}>
                Location ID {sortColumn === 'locationId' && <FaSort />}
              </th>
            )}
            {columnVisibility.macAddress && (
              <th onClick={() => handleSort('macAddress')}>
                MAC Address {sortColumn === 'macAddress' && <FaSort />}
              </th>
            )}
            {columnVisibility.site && (
              <th onClick={() => handleSort('site')}>
                Site {sortColumn === 'site' && <FaSort />}
              </th>
            )}
            {columnVisibility.status && (
              <th onClick={() => handleSort('status')}>
                Status {sortColumn === 'status' && <FaSort />}
              </th>
            )}
            {columnVisibility.action && <th>Action</th>}
          </tr>
        </thead>
        <tbody>
          {visibleRows.map((row, index) => (
            <React.Fragment key={row.id}>
              {showNewRowInput === index && (
                <tr className="new-row-input">
                  <td></td>
                  {columnVisibility.ipAddress && (
                    <td>
                      <input
                        type="text"
                        name="ipAddress"
                        value={newRow.ipAddress || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.aucode && (
                    <td>
                      <input
                        type="text"
                        name="aucode"
                        value={newRow.aucode || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.locationId && (
                    <td>
                      <input
                        type="text"
                        name="locationId"
                        value={newRow.locationId || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.macAddress && (
                    <td>
                      <input
                        type="text"
                        name="macAddress"
                        value={newRow.macAddress || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.site && (
                    <td>
                      <input
                        type="text"
                        name="site"
                        value={newRow.site || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.status && (
                    <td>
                      <input
                        type="text"
                        name="status"
                        value={newRow.status || ''}
                        onChange={(e) => handleInputChange(e, setNewRow)}
                      />
                    </td>
                  )}
                  {columnVisibility.action && <td></td>}
                  <td>
                    <button className="save-btn" onClick={handleSaveNewRow}>
                      <FaSave />
                    </button>
                    <button
                      className="cancel-btn"
                      onClick={() => setShowNewRowInput(false)}
                    >
                      <FaTimes />
                    </button>
                  </td>
                </tr>
              )}
              <tr>
                <td>
                  <input
                    type="checkbox"
                    checked={selectedRows.includes(row.id)}
                    onChange={() => handleSelectRow(row.id)}
                  />
                </td>
                {columnVisibility.ipAddress && (
                  <td>{editRowId === row.id ? <input type="text" name="ipAddress" value={editRowData.ipAddress || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.ipAddress}</td>
                )}
                {columnVisibility.aucode && (
                  <td>{editRowId === row.id ? <input type="text" name="aucode" value={editRowData.aucode || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.aucode}</td>
                )}
                {columnVisibility.locationId && (
                  <td>{editRowId === row.id ? <input type="text" name="locationId" value={editRowData.locationId || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.locationId}</td>
                )}
                {columnVisibility.macAddress && (
                  <td>{editRowId === row.id ? <input type="text" name="macAddress" value={editRowData.macAddress || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.macAddress}</td>
                )}
                {columnVisibility.site && (
                  <td>{editRowId === row.id ? <input type="text" name="site" value={editRowData.site || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.site}</td>
                )}
                {columnVisibility.status && (
                  <td>{editRowId === row.id ? <input type="text" name="status" value={editRowData.status || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.status}</td>
                )}
                {columnVisibility.action && (
                  <td>
                    {editRowId === row.id ? (
                      <button className="save-btn" onClick={handleSaveEditRow}>
                        <FaSave />
                      </button>
                    ) : (
                      <>
                        <button className="edit-btn" onClick={() => handleEditRow(row)}>
                          <FaEdit />
                        </button>
                        <button className="delete-btn" onClick={() => handleDeleteRow(row.id)}>
                          <FaTrash />
                        </button>
                      </>
                    )}
                  </td>
                )}
              </tr>
            </React.Fragment>
          ))}
          {showNewRowInput === rows.length && (
            <tr className="new-row-input">
              <td></td>
              {columnVisibility.ipAddress && (
                <td>
                  <input
                    type="text"
                    name="ipAddress"
                    value={newRow.ipAddress || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.aucode && (
                <td>
                  <input
                    type="text"
                    name="aucode"
                    value={newRow.aucode || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.locationId && (
                <td>
                  <input
                    type="text"
                    name="locationId"
                    value={newRow.locationId || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.macAddress && (
                <td>
                  <input
                    type="text"
                    name="macAddress"
                    value={newRow.macAddress || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.site && (
                <td>
                  <input
                    type="text"
                    name="site"
                    value={newRow.site || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.status && (
                <td>
                  <input
                    type="text"
                    name="status"
                    value={newRow.status || ''}
                    onChange={(e) => handleInputChange(e, setNewRow)}
                  />
                </td>
              )}
              {columnVisibility.action && <td></td>}
              <td>
                <button className="save-btn" onClick={handleSaveNewRow}>
                  <FaSave />
                </button>
                <button
                  className="cancel-btn"
                  onClick={() => setShowNewRowInput(false)}
                >
                  <FaTimes />
                </button>
              </td>
            </tr>
          )}
        </tbody>
      </table>

      <div className="table-footer">
        <div className="pagination">
          <button
            className="page-btn"
            onClick={() => handleChangePage(currentPage - 1)}
            disabled={currentPage === 1}
          >
            &lt;
          </button>
          {currentPage > 1 && <button className="page-btn" onClick={() => handleChangePage(1)}>1</button>}
          {currentPage > 2 && <span>...</span>}
          <span className="current-page">{currentPage}</span>
          {currentPage < totalPages - 1 && <span>...</span>}
          {currentPage < totalPages && <button className="page-btn" onClick={() => handleChangePage(totalPages)}>{totalPages}</button>}
          <button
            className="page-btn"
            onClick={() => handleChangePage(currentPage + 1)}
            disabled={currentPage === totalPages}
          >
            &gt;
          </button>
        </div>
        <div className="footer-controls">
          <div className="items-per-page">
            <label>
              Items per page:
              <select value={itemsPerPage} onChange={(e) => handleItemsPerPageChange(parseInt(e.target.value, 10))}>
                <option value={5}>5</option>
                <option value={10}>10</option>
                <option value={20}>20</option>
                <option value={50}>50</option>
              </select>
            </label>
          </div>
          <div className="total-items">
            Total items: {totalItems}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TableComponent;

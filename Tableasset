import React, { useState } from 'react';
import { FaPlus, FaEdit, FaArrowsAlt, FaTrash, FaSave, FaTimes } from 'react-icons/fa';
import './AssetTable.css';

const AssetTable = () => {
  const initialRows = [
    {
      id: 1,
      ipAddress: '192.168.1.1',
      assetType: 'Camera',
      assetLifeCycleState: 'Installed',
      operationalState: 'Enabled',
      operationalSubState: '',
      missingAssetReport: 'No',
      schedulerTaskState: 'draft',
      taskType: 'user'
    }
  ];

  const [rows, setRows] = useState(initialRows);
  const [newRow, setNewRow] = useState({});
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [showNewRowInput, setShowNewRowInput] = useState(false);
  const [moveRowId, setMoveRowId] = useState(null);
  const [newRowNumber, setNewRowNumber] = useState(null);

  const handleInputChange = (e, setFunction) => {
    const { name, value } = e.target;
    setFunction((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddRow = (index) => {
    setShowNewRowInput(index);
    setNewRow({});
  };

  const handleSaveNewRow = () => {
    setRows((prev) => {
      const newRows = [...prev];
      newRows.splice(showNewRowInput + 1, 0, { id: prev.length + 1, ...newRow });
      return newRows;
    });
    setShowNewRowInput(false);
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
  };

  const handleSaveEditRow = () => {
    setRows((prev) => prev.map(row => row.id === editRowId ? editRowData : row));
    setEditRowId(null);
  };

  const handleMoveRow = (row) => {
    setMoveRowId(row.id);
  };

  const handleSaveMoveRow = () => {
    if (newRowNumber < 1 || newRowNumber > rows.length) {
      alert("Invalid row number");
      return;
    }
    setRows((prev) => {
      const newRows = [...prev];
      const movingRow = newRows.find(row => row.id === moveRowId);
      newRows.splice(newRows.indexOf(movingRow), 1);
      newRows.splice(newRowNumber - 1, 0, movingRow);
      return newRows;
    });
    setMoveRowId(null);
  };

  const handleDeleteRow = (rowId) => {
    setRows((prev) => prev.filter(row => row.id !== rowId));
  };

  const operationalSubStateOptions = {
    Enabled: [],
    Disabled: ['decommissioned', 'Replaced', 'Temporarily disabled for 3 days', 'Temp hours'],
    Excluded: ['routing', 'subnet changed', 'VLAN issue', 'Gateway incorrect', 'defective hardware']
  };

  return (
    <div>
      <table className="asset-table">
        <thead>
          <tr>
            <th>IP Address</th>
            <th>Asset Type</th>
            <th>Asset Life Cycle State</th>
            <th>Actions</th>
            <th>Operational State</th>
            <th>Operational Sub State</th>
            <th>Missing Asset Report</th>
            <th>Scheduler Task State</th>
            <th>Task Type</th>
          </tr>
        </thead>
        <tbody>
          {rows.map((row, index) => (
            <>
              <tr key={row.id}>
                <td>{editRowId === row.id ? <input name="ipAddress" value={editRowData.ipAddress} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.ipAddress}</td>
                <td>{editRowId === row.id ? <input name="assetType" value={editRowData.assetType} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.assetType}</td>
                <td>{editRowId === row.id ? <input name="assetLifeCycleState" value={editRowData.assetLifeCycleState} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.assetLifeCycleState}</td>
                <td>
                  <FaPlus onClick={() => handleAddRow(index)} />
                  {editRowId === row.id ? <FaSave onClick={handleSaveEditRow} /> : <FaEdit onClick={() => handleEditRow(row)} />}
                  {moveRowId === row.id ? <FaSave onClick={handleSaveMoveRow} /> : <FaArrowsAlt onClick={() => handleMoveRow(row)} />}
                  <FaTrash onClick={() => handleDeleteRow(row.id)} />
                </td>
                <td>{editRowId === row.id ? (
                  <select name="operationalState" value={editRowData.operationalState} onChange={(e) => handleInputChange(e, setEditRowData)}>
                    <option value="Enabled">Enabled</option>
                    <option value="Disabled">Disabled</option>
                    <option value="Excluded">Excluded</option>
                  </select>
                ) : row.operationalState}</td>
                <td>{editRowId === row.id ? (
                  <select name="operationalSubState" value={editRowData.operationalSubState} onChange={(e) => handleInputChange(e, setEditRowData)} disabled={operationalSubStateOptions[editRowData.operationalState].length === 0}>
                    <option value="">None</option>
                    {operationalSubStateOptions[editRowData.operationalState].map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select>
                ) : row.operationalSubState}</td>
                <td>{editRowId === row.id ? <select name="missingAssetReport" value={editRowData.missingAssetReport} onChange={(e) => handleInputChange(e, setEditRowData)}>
                  <option value="Yes">Yes</option>
                  <option value="No">No</option>
                </select> : row.missingAssetReport}</td>
                <td>{editRowId === row.id ? <select name="schedulerTaskState" value={editRowData.schedulerTaskState} onChange={(e) => handleInputChange(e, setEditRowData)}>
                  <option value="draft">draft</option>
                  <option value="scheduled">scheduled</option>
                  <option value="started">started</option>
                  <option value="running">running</option>
                  <option value="stopped">stopped</option>
                  <option value="hung">hung</option>
                  <option value="disabled">disabled</option>
                </select> : row.schedulerTaskState}</td>
                <td>{editRowId === row.id ? <select name="taskType" value={editRowData.taskType} onChange={(e) => handleInputChange(e, setEditRowData)}>
                  <option value="user">user</option>
                  <option value="system">system</option>
                </select> : row.taskType}</td>
              </tr>
              {showNewRowInput === index && (
                <tr key={`new-${index}`}>
                  <td><input name="ipAddress" value={newRow.ipAddress || ''} onChange={(e) => handleInputChange(e, setNewRow)} /></td>
                  <td><input name="assetType" value={newRow.assetType || ''} onChange={(e) => handleInputChange(e, setNewRow)} /></td>
                  <td><input name="assetLifeCycleState" value={newRow.assetLifeCycleState || ''} onChange={(e) => handleInputChange(e, setNewRow)} /></td>
                  <td>
                    <FaSave onClick={handleSaveNewRow} />
                    <FaTimes onClick={() => setShowNewRowInput(false)} />
                  </td>
                  <td><select name="operationalState" value={newRow.operationalState || 'Enabled'} onChange={(e) => handleInputChange(e, setNewRow)}>
                    <option value="Enabled">Enabled</option>
                    <option value="Disabled">Disabled</option>
                    <option value="Excluded">Excluded</option>
                  </select></td>
                  <td><select name="operationalSubState" value={newRow.operationalSubState || ''} onChange={(e) => handleInputChange(e, setNewRow)} disabled={operationalSubStateOptions[newRow.operationalState || 'Enabled'].length === 0}>
                    <option value="">None</option>
                    {operationalSubStateOptions[newRow.operationalState || 'Enabled'].map((option) => (
                      <option key={option} value={option}>{option}</option>
                    ))}
                  </select></td>
                  <td><select name="missingAssetReport" value={newRow.missingAssetReport || 'No'} onChange={(e) => handleInputChange(e, setNewRow)}>
                    <option value="Yes">Yes</option>
                    <option value="No">No</option>
                  </select></td>
                  <td><select name="schedulerTaskState" value={newRow.schedulerTaskState || 'draft'} onChange={(e) => handleInputChange(e, setNewRow)}>
                    <option value="draft">draft</option>
                    <option value="scheduled">scheduled</option>
                    <option value="started">started</option>
                    <option value="running">running</option>
                    <option value="stopped">stopped</option>
                    <option value="hung">hung</option>
                    <option value="disabled">disabled</option>
                  </select></td>
                  <td><select name="taskType" value={newRow.taskType || 'user'} onChange={(e) => handleInputChange(e, setNewRow)}>
                    <option value="user">user</option>
                    <option value="system">system</option>
                  </select></td>
                </tr>
              )}
            </>
          ))}
          {moveRowId && (
            <tr>
              <td colSpan="10">
                <input type="number" value={newRowNumber || ''} onChange={(e) => setNewRowNumber(e.target.value)} placeholder="New row number" />
                <button onClick={handleSaveMoveRow}>Move</button>
                <button onClick={() => setMoveRowId(null)}>Cancel</button>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

export default AssetTable;
```

### CSS

Add the following CSS to `AssetTable.css` to style the table and its controls:

```css
.asset-table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 20px;
}

.asset-table th,
.asset-table td {
  border: 1px solid #ddd;
  padding: 8px;
}

.asset-table th {
  background-color: #f2f2f2;
  text-align: left;
}

.asset-table tr:nth-child(even) {
  background-color: #f9f9f9;
}

.asset-table tr:hover {
  background-color: #ddd;
}

.asset-table input,
.asset-table select {
  width: 100%;
  box-sizing: border-box;
}

.asset-table .icon-button {
  cursor: pointer;
  margin: 0 5px;
}
```

This code provides a table with the specified columns and functionalities:
- **IP Address**
- **Asset Type**
- **Asset Life Cycle State**
- **Actions (Add, Edit, Move, Delete)**
- **Operational State**
- **Operational Sub State**
- **Missing Asset Report**
- **Scheduler Task State**
- **Task Type**

Each action (Add, Edit, Move, Delete) is represented by an icon, and the operational sub-states change dynamically based on the operational state.

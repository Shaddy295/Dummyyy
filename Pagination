import React, { useState } from 'react';

const TableWithAddEditRow = () => {
  const [rows, setRows] = useState([
    { id: 1, ipAddress: '192.168.1.1', auCode: 'AU123', locationId: 'LOC001', mac: '00:14:22:01:23:45', site: 'Site A', status: 'Active' },
    { id: 2, ipAddress: '192.168.1.2', auCode: 'AU124', locationId: 'LOC002', mac: '00:14:22:01:23:46', site: 'Site B', status: 'Inactive' },
    { id: 3, ipAddress: '192.168.1.3', auCode: 'AU125', locationId: 'LOC003', mac: '00:14:22:01:23:47', site: 'Site C', status: 'Active' },
    { id: 4, ipAddress: '192.168.1.4', auCode: 'AU126', locationId: 'LOC004', mac: '00:14:22:01:23:48', site: 'Site D', status: 'Inactive' },
    { id: 5, ipAddress: '192.168.1.5', auCode: 'AU127', locationId: 'LOC005', mac: '00:14:22:01:23:49', site: 'Site E', status: 'Active' },
    { id: 6, ipAddress: '192.168.1.6', auCode: 'AU128', locationId: 'LOC006', mac: '00:14:22:01:23:50', site: 'Site F', status: 'Inactive' },
    { id: 7, ipAddress: '192.168.1.7', auCode: 'AU129', locationId: 'LOC007', mac: '00:14:22:01:23:51', site: 'Site G', status: 'Active' },
    { id: 8, ipAddress: '192.168.1.8', auCode: 'AU130', locationId: 'LOC008', mac: '00:14:22:01:23:52', site: 'Site H', status: 'Inactive' },
    { id: 9, ipAddress: '192.168.1.9', auCode: 'AU131', locationId: 'LOC009', mac: '00:14:22:01:23:53', site: 'Site I', status: 'Active' },
    { id: 10, ipAddress: '192.168.1.10', auCode: 'AU132', locationId: 'LOC010', mac: '00:14:22:01:23:54', site: 'Site J', status: 'Inactive' },
  ]);
  const [newRow, setNewRow] = useState({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
  const [isAdding, setIsAdding] = useState(false);
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 5;

  const handleAddRow = () => {
    setIsAdding(true);
    setEditRowId(null);
  };

  const handleSaveRow = () => {
    setRows([...rows, { id: rows.length + 1, ...newRow, status: 'Active' }]);
    setNewRow({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
    setIsAdding(false);
  };

  const handleCancelRow = () => {
    setNewRow({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
    setIsAdding(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewRow({ ...newRow, [name]: value });
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
    setIsAdding(false);
  };

  const handleEditInputChange = (e) => {
    const { name, value } = e.target;
    setEditRowData({ ...editRowData, [name]: value });
  };

  const handleSaveEditRow = () => {
    setRows(rows.map(row => (row.id === editRowId ? editRowData : row)));
    setEditRowId(null);
  };

  const handleCancelEditRow = () => {
    setEditRowId(null);
    setEditRowData({});
  };

  const handleChangePage = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentRows = rows.slice(indexOfFirstRow, indexOfLastRow);

  return (
    <div>
      <table>
        <thead>
          <tr>
            <th>ID</th>
            <th>IP Address</th>
            <th>AU Code</th>
            <th>Location ID</th>
            <th>MAC</th>
            <th>Site</th>
            <th>Actions</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>
          {currentRows.map((row) => (
            <tr key={row.id}>
              {editRowId === row.id ? (
                <>
                  <td>{row.id}</td>
                  <td><input type="text" name="ipAddress" value={editRowData.ipAddress} onChange={handleEditInputChange} /></td>
                  <td><input type="text" name="auCode" value={editRowData.auCode} onChange={handleEditInputChange} /></td>
                  <td><input type="text" name="locationId" value={editRowData.locationId} onChange={handleEditInputChange} /></td>
                  <td><input type="text" name="mac" value={editRowData.mac} onChange={handleEditInputChange} /></td>
                  <td><input type="text" name="site" value={editRowData.site} onChange={handleEditInputChange} /></td>
                  <td></td>
                  <td>{row.status}</td>
                </>
              ) : (
                <>
                  <td>{row.id}</td>
                  <td>{row.ipAddress}</td>
                  <td>{row.auCode}</td>
                  <td>{row.locationId}</td>
                  <td>{row.mac}</td>
                  <td>{row.site}</td>
                  <td></td>
                  <td>{row.status}</td>
                </>
              )}
            </tr>
          ))}
          {isAdding && (
            <tr>
              <td>{rows.length + 1}</td>
              <td><input type="text" name="ipAddress" value={newRow.ipAddress} onChange={handleInputChange} /></td>
              <td><input type="text" name="auCode" value={newRow.auCode} onChange={handleInputChange} /></td>
              <td><input type="text" name="locationId" value={newRow.locationId} onChange={handleInputChange} /></td>
              <td><input type="text" name="mac" value={newRow.mac} onChange={handleInputChange} /></td>
              <td><input type="text" name="site" value={newRow.site} onChange={handleInputChange} /></td>
              <td></td>
              <td>Active</td>
            </tr>
          )}
        </tbody>
      </table>
      <div>
        {isAdding && (
          <>
            <button onClick={handleSaveRow}>Save New Row</button>
            <button onClick={handleCancelRow}>Cancel New Row</button>
          </>
        )}
        {editRowId !== null && (
          <>
            <button onClick={handleSaveEditRow}>Save Edit</button>
            <button onClick={handleCancelEditRow}>Cancel Edit</button>
          </>
        )}
        {!isAdding && editRowId === null && (
          <button onClick={handleAddRow}>Add Record</button>
        )}
      </div>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '10px' }}>
        <div>
          {Array.from({ length: Math.ceil(rows.length / rowsPerPage) }, (_, i) => (
            <button key={i + 1} onClick={() => handleChangePage(i + 1)}>
              {i + 1}
            </button>
          ))}
        </div>
        <div>
          {`Displaying
${indexOfFirstRow + 1} to ${Math.min(indexOfLastRow, rows.length)} of ${rows.length} rows`}
        div>
      </div> ); };

export default TableWithAddEditRow;

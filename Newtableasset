import React, { useState, useEffect } from 'react';
import {
  FaPlus,
  FaEdit,
  FaArrowsAlt,
  FaTrash,
  FaSave,
  FaTimes,
  FaSort,
  FaColumns,
  FaLayerGroup,
  FaSearch,
  FaEye,
  FaDownload,
} from 'react-icons/fa';
import './TableWithAddEditRow.css';

const generateDummyData = () => {
  const dummyData = [];
  for (let i = 1; i <= 50; i++) {
    dummyData.push({
      id: i,
      ipAddress: `192.168.1.${i}`,
      assetType: `Camera ${i}`,
      assetLifeCycleState: i % 2 === 0 ? 'Installed' : 'Active',
      operationalState: i % 3 === 0 ? 'Enabled' : 'Disabled',
      operationalSubState: i % 5 === 0 ? 'Substate' : '',
      missingAssetReport: i % 4 === 0 ? 'Yes' : 'No',
      schedulerTaskState: i % 6 === 0 ? 'scheduled' : 'draft',
      taskType: i % 7 === 0 ? 'system' : 'user',
    });
  }
  return dummyData;
};

const AssetTable = () => {
  const [rows, setRows] = useState([]);
  const [newRow, setNewRow] = useState({});
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [showNewRowInput, setShowNewRowInput] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortDirection, setSortDirection] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [columnVisibility, setColumnVisibility] = useState({
    ipAddress: true,
    assetType: true,
    assetLifeCycleState: true,
    operationalState: true,
    operationalSubState: true,
    missingAssetReport: true,
    schedulerTaskState: true,
    taskType: true,
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [showSearch, setShowSearch] = useState(false);
  const [selectAll, setSelectAll] = useState(false);
  const [selectedRows, setSelectedRows] = useState([]);
  const [showPreview, setShowPreview] = useState(false);
  const [rowHeight, setRowHeight] = useState('normal');

  useEffect(() => {
    const initialData = generateDummyData();
    setRows(initialData);
  }, []);

  const handleInputChange = (e, setFunction) => {
    const { name, value } = e.target;
    setFunction((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddRow = (index) => {
    setShowNewRowInput(index);
    setNewRow({});
  };

  const handleSaveNewRow = () => {
    setRows((prev) => {
      const newRows = [...prev];
      newRows.splice(showNewRowInput + 1, 0, { id: prev.length + 1, ...newRow });
      return newRows;
    });
    setShowNewRowInput(false);
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
  };

  const handleSaveEditRow = () => {
    setRows((prev) => prev.map((row) => (row.id === editRowId ? editRowData : row)));
    setEditRowId(null);
  };

  const handleDeleteRow = (rowId) => {
    setRows((prev) => prev.filter((row) => row.id !== rowId));
  };

  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const applySort = (data) => {
    if (sortColumn && sortDirection) {
      return [...data].sort((a, b) => {
        const columnA = a[sortColumn];
        const columnB = b[sortColumn];
        if (sortDirection === 'asc') {
          if (columnA < columnB) return -1;
          if (columnA > columnB) return 1;
          return 0;
        } else {
          if (columnA > columnB) return -1;
          if (columnA < columnB) return 1;
          return 0;
        }
      });
    }
    return data;
  };

  const handleChangePage = (page) => {
    setCurrentPage(page);
  };

  const handleColumnVisibilityChange = (column) => {
    setColumnVisibility((prev) => ({ ...prev, [column]: !prev[column] }));
  };

  const handleToggleSearch = () => {
    setShowSearch(!showSearch);
    setSearchTerm('');
  };

  const handleSearch = () => {
    if (!searchTerm) return rows;
    return rows.filter((row) =>
      Object.values(row).some(
        (value) =>
          typeof value === 'string' && value.toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  };

  const handleSelectRow = (rowId) => {
    const index = selectedRows.indexOf(rowId);
    if (index === -1) {
      setSelectedRows((prev) => [...prev, rowId]);
    } else {
      setSelectedRows((prev) => prev.filter((id) => id !== rowId));
    }
  };

  const handleSelectAllRows = () => {
    if (selectAll) {
      setSelectedRows([]);
    } else {
      setSelectedRows(rows.map((row) => row.id));
    }
    setSelectAll(!selectAll);
  };

  const filteredRows = handleSearch();
  const sortedRows = applySort(filteredRows);
  const lastIndex = currentPage * itemsPerPage;
  const firstIndex = lastIndex - itemsPerPage;
  const visibleRows = sortedRows.slice(firstIndex, lastIndex);
  const totalPages = Math.ceil(sortedRows.length / itemsPerPage);

  const handlePreview = () => {
    setShowPreview(true);
  };

  const handleClosePreview = () => {
    setShowPreview(false);
  };

  const handleDownload = () => {
    alert('Implement download functionality');
  };

  const handleItemsPerPageChange = (value) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };

  const handleDensityChange = (density) => {
    setRowHeight(density);
  };

  return (
    <div>
      <div className="table-controls">
        <button className="preview-btn" onClick={handlePreview}>
          <FaEye /> Preview
        </button>
        <div className="dropdown">
          <button className="dropbtn">
            <FaSort /> Sort
          </button>
          <div className="dropdown-content sort-dropdown">
            {Object.keys(columnVisibility).map((column) =>
              columnVisibility[column] ? (
                <label key={column}>
                  <input
                    type="checkbox"
                    checked={sortColumn === column}
                    onChange={() => handleSort(column)}
                  />{' '}
                  {column}
                </label>
              ) : null
            )}
          </div>
        </div>
        <div className="dropdown">
          <button className="dropbtn">
            <FaColumns /> Manage Columns
          </button>
          <div className="dropdown-content">
            {Object.keys(columnVisibility).map((column) => (
              <label key={column}>
                <input
                  type="checkbox"
                  checked={columnVisibility[column]}
                  onChange={() => handleColumnVisibilityChange(column)}
                />{' '}
                {column}
              </label>
            ))}
          </div>
        </div>
        <div className="dropdown density-dropdown">
          <button className="dropbtn density-btn">
            <FaLayerGroup /> Density
          </button>
          <div className="dropdown-content">
            <select onChange={(e) => handleDensityChange(e.target.value)}>
              <option value="compact">Compact</option>
              <option value="dense">Dense</option>
              <option value="normal">Normal</option>
            </select>
          </div>
        </div>
        <div className="search-container">
          {!showSearch && (
            <button className="search-btn" onClick={handleToggleSearch}>
              <FaSearch /> Search
            </button>
          )}
          {showSearch && (
            <input
              type="text"
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          )}
        </div>
      </div>

      <table className={`asset-table ${rowHeight}`}>
        <thead>
          <tr>
            <th>
              <input
                type="checkbox"
                checked={selectAll}
                onChange={handleSelectAllRows}
              />
            </th>
            {columnVisibility.ipAddress && <th>IP Address</th>}
            {columnVisibility.assetType && <th>Asset Type</th>}
            {columnVisibility.assetLifeCycleState && <th>Asset Life Cycle State</th>}
            {columnVisibility.operationalState && <th>Operational State</th>}
            {columnVisibility.operationalSubState && <th>Operational Sub State</th>}
            {columnVisibility.missingAssetReport && <th>Missing Asset Report</th>}
            {columnVisibility.schedulerTaskState && <th>Scheduler Task State</th>}
            {columnVisibility.taskType && <th>Task Type</th>}
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {visibleRows.map((row) => (
            <tr key={row.id}>
              <td>
                <input
                  type="checkbox"
                  checked={selectedRows.includes(row.id)}
                  onChange={() => handleSelectRow(row.id)}
                />
              </td>
              {columnVisibility.ipAddress && (
                <td>
                  {editRowId === row.id ? (
                    <input
                      name="ipAddress"
                      value={editRowData.ipAddress}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    />
                  ) : (
                    row.ipAddress
                  )}
                </td>
              )}
              {columnVisibility.assetType && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="assetType"
                      value={editRowData.assetType}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="Camera">Camera</option>
                      <option value="NVR">NVR</option>
                      <option value="Alarm panel">Alarm panel</option>
                      <option value="Access Control Panel">Access Control Panel</option>
                    </select>
                  ) : (
                    row.assetType
                  )}
                </td>
              )}
              {columnVisibility.assetLifeCycleState && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="assetLifeCycleState"
                      value={editRowData.assetLifeCycleState}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="Installed">Installed</option>
                      <option value="Active">Active</option>
                    </select>
                  ) : (
                    row.assetLifeCycleState
                  )}
                </td>
              )}
              {columnVisibility.operationalState && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="operationalState"
                      value={editRowData.operationalState}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="Enabled">Enabled</option>
                      <option value="Disabled">Disabled</option>
                    </select>
                  ) : (
                    row.operationalState
                  )}
                </td>
              )}
              {columnVisibility.operationalSubState && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="operationalSubState"
                      value={editRowData.operationalSubState}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="">None</option>
                      <option value="Substate">Substate</option>
                    </select>
                  ) : (
                    row.operationalSubState
                  )}
                </td>
              )}
              {columnVisibility.missingAssetReport && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="missingAssetReport"
                      value={editRowData.missingAssetReport}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="Yes">Yes</option>
                      <option value="No">No</option>
                    </select>
                  ) : (
                    row.missingAssetReport
                  )}
                </td>
              )}
              {columnVisibility.schedulerTaskState && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="schedulerTaskState"
                      value={editRowData.schedulerTaskState}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="scheduled">scheduled</option>
                      <option value="draft">draft</option>
                    </select>
                  ) : (
                    row.schedulerTaskState
                  )}
                </td>
              )}
              {columnVisibility.taskType && (
                <td>
                  {editRowId === row.id ? (
                    <select
                      name="taskType"
                      value={editRowData.taskType}
                      onChange={(e) => handleInputChange(e, setEditRowData)}
                    >
                      <option value="system">system</option>
                      <option value="user">user</option>
                    </select>
                  ) : (
                    row.taskType
                  )}
                </td>
              )}
              <td>
                {editRowId === row.id ? (
                  <FaSave onClick={handleSaveEditRow} title="Save" />
                ) : (
                  <>
                    <FaEdit onClick={() => handleEditRow(row)} title="Edit" />
                    <FaArrowsAlt onClick={() => handleAddRow(row.id)} title="Insert" />
                  </>
                )}
                <FaTrash onClick={() => handleDeleteRow(row.id)} title="Delete" />
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      <div className="table-footer">
        <div className="pagination">
          <button onClick={() => handleChangePage(currentPage - 1)} disabled={currentPage === 1}>
            {'<'}
          </button>
          <button onClick={() => handleChangePage(1)} disabled={currentPage === 1}>
            {'1'}
          </button>
          {totalPages > 1 && <span>...</span>}
          <button onClick={() => handleChangePage(totalPages)} disabled={currentPage === totalPages}>
            {totalPages}
          </button>
          <button onClick={() => handleChangePage(currentPage + 1)} disabled={currentPage === totalPages}>
            {'>'}
          </button>
        </div>

        <div className="items-per-page">
          <label>Rows per page:</label>
          <select value={itemsPerPage} onChange={(e) => handleItemsPerPageChange(e.target.value)}>
            <option value={10}>10</option>
            <option value={25}>25</option>
            <option value={50}>50</option>
            <option value={100}>100</option>
          </select>
        </div>
        <div className="row-info">
          {selectedRows.length} of {rows.length} rows selected
        </div>
        <div className="page-info">
          Page {currentPage} of {totalPages}
        </div>
      </div>

      {showPreview && (
        <div className="preview-popup">
          <div className="preview-header">
            <h3>Preview</h3>
            <button className="close-btn" onClick={handleClosePreview}>
              <FaTimes />
            </button>
          </div>
          <div className="preview-content">
            <table className="preview-table">
              <thead>
                <tr>
                  {Object.keys(columnVisibility).map(
                    (column) =>
                      columnVisibility[column] && <th key={column}>{column}</th>
                  )}
                </tr>
              </thead>
              <tbody>
                {sortedRows.slice(0, 25).map((row) => (
                  <tr key={row.id}>
                    {Object.keys(columnVisibility).map(
                      (column) =>
                        columnVisibility[column] && (
                          <td key={`${row.id}-${column}`}>{row[column]}</td>
                        )
                    )}
                  </tr>
                ))}
              </tbody>
            </table>
            <div className="preview-actions">
              <button onClick={handleDownload}>
                <FaDownload /> Download
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default AssetTable;



/* TableWithAddEditRow.css */

.table-controls {
  display: flex;
  justify-content: space-between;
  margin-bottom: 10px;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropbtn {
  background-color: #4CAF50;
  color: white;
  padding: 10px;
  font-size: 14px;
  border: none;
  cursor: pointer;
}

.density-btn {
  background-color: #3b5998;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

.dropdown-content label,
.dropdown-content button,
.dropdown-content select {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown-content label:hover,
.dropdown-content button:hover,
.dropdown-content select:hover {
  background-color: #f1f1f1;
}

.dropdown:hover .dropdown-content {
  display: block;
}

.asset-table {
  width: 100%;
  border-collapse: collapse;
}

.asset-table th,
.asset-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.asset-table th {
  background-color: #4CAF50;
  color: white;
}

.asset-table.compact td {
  padding: 4px;
}

.asset-table.dense td {
  padding: 6px;
}

.asset-table.normal td {
  padding: 8px;
}

.table-footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-top: 10px;
}

.pagination {
  display: flex;
  justify-content: center;
  margin: 10px 0;
}

.pagination button {
  margin: 0 5px;
  padding: 5px 10px;
  border: none;
  background-color: #4CAF50;
  color: white;
  cursor: pointer;
}

.pagination button:disabled {
  background-color: #ddd;
  cursor: not-allowed;
}

.items-per-page {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  margin: 10px 0;
}

.items-per-page label {
  margin-right: 5px;
}

.row-info {
  margin-left: 20px;
}

.page-info {
  margin-left: 20px;
}

.preview-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.preview-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #fff;
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

.preview-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 5px;
  max-width: 90%;
  max-height: 80%;
  overflow-y: auto;
}

.preview-table {
  width: 100%;
  border-collapse: collapse;
}

.preview-table th,
.preview-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.preview-table th {
  background-color: #4CAF50;
  color: white;
}

.preview-actions {
  margin-top: 10px;
  text-align: right;
}

.close-btn {
  background-color: #f44336;
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
}

.close-btn:hover {
  background-color: #d32f2f;
}

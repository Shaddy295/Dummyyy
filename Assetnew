import React, { useState, useEffect } from 'react';
import { FaSort, FaEdit, FaTrash, FaSave, FaTimes, FaCog } from 'react-icons/fa';

const TableComponent = ({ rows }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [totalItems, setTotalItems] = useState(rows.length);
  const [visibleRows, setVisibleRows] = useState([]);
  const [selectedRows, setSelectedRows] = useState([]);
  const [sortColumn, setSortColumn] = useState(null);
  const [sortOrder, setSortOrder] = useState('asc');
  const [showNewRowInput, setShowNewRowInput] = useState(false);
  const [newRow, setNewRow] = useState({});
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [columnVisibility, setColumnVisibility] = useState({
    ipAddress: true,
    assetType: true,
    macAddress: true,
    locationId: true,
    site: true,
    assetLifeCycleState: true,
    operationalState: false,
    schedulerTaskState: false,
    taskType: false,
    action: true,
  });

  useEffect(() => {
    setTotalItems(rows.length);
    const startIdx = (currentPage - 1) * itemsPerPage;
    const endIdx = startIdx + itemsPerPage;
    setVisibleRows(rows.slice(startIdx, endIdx));
  }, [rows, currentPage, itemsPerPage]);

  const handleSort = (column) => {
    const order = sortColumn === column && sortOrder === 'asc' ? 'desc' : 'asc';
    setSortColumn(column);
    setSortOrder(order);
    const sortedRows = [...rows].sort((a, b) => {
      if (a[column] < b[column]) return order === 'asc' ? -1 : 1;
      if (a[column] > b[column]) return order === 'asc' ? 1 : -1;
      return 0;
    });
    setVisibleRows(sortedRows.slice(0, itemsPerPage));
  };

  const handleSelectRow = (rowId) => {
    setSelectedRows((prevSelected) =>
      prevSelected.includes(rowId)
        ? prevSelected.filter((id) => id !== rowId)
        : [...prevSelected, rowId]
    );
  };

  const handleItemsPerPageChange = (newItemsPerPage) => {
    setItemsPerPage(newItemsPerPage);
    setCurrentPage(1);
  };

  const handleChangePage = (newPage) => {
    setCurrentPage(newPage);
  };

  const handleInputChange = (e, setData) => {
    const { name, value } = e.target;
    setData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleSaveNewRow = () => {
    // Save new row logic here
    setShowNewRowInput(false);
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
  };

  const handleSaveEditRow = () => {
    // Save edited row logic here
    setEditRowId(null);
  };

  const handleDeleteRow = (rowId) => {
    // Delete row logic here
  };

  const toggleColumnVisibility = (columnName) => {
    setColumnVisibility((prevVisibility) => ({
      ...prevVisibility,
      [columnName]: !prevVisibility[columnName],
    }));
  };

  return (
    <div className="table-container">
      <div className="manage-columns">
        <button className="manage-columns-btn" onClick={() => toggleColumnVisibility('operationalState')}>
          Manage Columns <FaCog />
        </button>
      </div>
      <table className="table">
        <thead>
          <tr>
            <th></th>
            {columnVisibility.ipAddress && (
              <th onClick={() => handleSort('ipAddress')}>
                IP Address {sortColumn === 'ipAddress' && <FaSort />}
              </th>
            )}
            {columnVisibility.assetType && (
              <th onClick={() => handleSort('assetType')}>
                Asset Type {sortColumn === 'assetType' && <FaSort />}
              </th>
            )}
            {columnVisibility.macAddress && (
              <th onClick={() => handleSort('macAddress')}>
                Mac Address {sortColumn === 'macAddress' && <FaSort />}
              </th>
            )}
            {columnVisibility.locationId && (
              <th onClick={() => handleSort('locationId')}>
                Location ID {sortColumn === 'locationId' && <FaSort />}
              </th>
            )}
            {columnVisibility.site && (
              <th onClick={() => handleSort('site')}>
                Site {sortColumn === 'site' && <FaSort />}
              </th>
            )}
            {columnVisibility.assetLifeCycleState && (
              <th onClick={() => handleSort('assetLifeCycleState')}>
                Asset Life Cycle State {sortColumn === 'assetLifeCycleState' && <FaSort />}
              </th>
            )}
            {columnVisibility.action && <th>Action</th>}
          </tr>
        </thead>
        <tbody>
          {visibleRows.map((row) => (
            <tr key={row.id}>
              <td>
                <input
                  type="checkbox"
                  checked={selectedRows.includes(row.id)}
                  onChange={() => handleSelectRow(row.id)}
                />
              </td>
              {columnVisibility.ipAddress && (
                <td>{editRowId === row.id ? <input type="text" name="ipAddress" value={editRowData.ipAddress || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.ipAddress}</td>
              )}
              {columnVisibility.assetType && (
                <td>{editRowId === row.id ? <input type="text" name="assetType" value={editRowData.assetType || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.assetType}</td>
              )}
              {columnVisibility.macAddress && (
                <td>{editRowId === row.id ? <input type="text" name="macAddress" value={editRowData.macAddress || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.macAddress}</td>
              )}
              {columnVisibility.locationId && (
                <td>{editRowId === row.id ? <input type="text" name="locationId" value={editRowData.locationId || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.locationId}</td>
              )}
              {columnVisibility.site && (
                <td>{editRowId === row.id ? <input type="text" name="site" value={editRowData.site || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.site}</td>
              )}
              {columnVisibility.assetLifeCycleState && (
                <td>{editRowId === row.id ? <input type="text" name="assetLifeCycleState" value={editRowData.assetLifeCycleState || ''} onChange={(e) => handleInputChange(e, setEditRowData)} /> : row.assetLifeCycleState}</td>
              )}
              {columnVisibility.action && (
                <td>
                  {editRowId === row.id ? (
                    <button className="save-btn" onClick={handleSaveEditRow}>
                      <FaSave />
                    </button>
                  ) : (
                    <>
                      <button className="edit-btn" onClick={() => handleEditRow(row)}>
                        <FaEdit />
                      </button>
                      <button className="delete-btn" onClick={() => handleDeleteRow(row.id)}>
                        <FaTrash />
                      </button>
                    </>
                  )}
                  {editRowId === row.id && (
                    <button className="cancel-btn" onClick={() => setEditRowId(null)}>
                      <FaTimes />
                    </button>
                  )}
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
      <div className="pagination">
        <button onClick={() => handleChangePage(currentPage - 1)} disabled={currentPage === 1}>
          Previous
        </button>
        <span>Page {currentPage}</span>
        <button onClick={() => handleChangePage(currentPage + 1)} disabled={currentPage === Math.ceil(totalItems / itemsPerPage)}>
          Next
        </button>
        <div className="items-per-page">
          <label>
            Rows per page:
            <select value={itemsPerPage} onChange={(e) => handleItemsPerPageChange(parseInt(e.target.value, 10))}>
              <option value={5}>5</option>
              <option value={10}>10</option>
              <option value={20}>20</option>
              <option value={50}>50</option>
            </select>
          </label>
        </div>
        <div className="total-items">
          {totalItems === 0 ? (
            <span>No items</span>
          ) : (
            <span>Total items: {totalItems}</span>
          )}
        </div>
      </div>
    </div>
  );
};

export default TableComponent;

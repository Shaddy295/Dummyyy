import React, { useState } from 'react';
import { FaEye, FaEyeSlash } from 'react-icons/fa';
import './TableWithAddEditRow.css'; // Import the CSS file

const TableWithAddEditRow = () => {
  const [rows, setRows] = useState([
    // initial rows here
  ]);
  const [newRow, setNewRow] = useState({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
  const [isAdding, setIsAdding] = useState(false);
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(5);
  const [columnVisibility, setColumnVisibility] = useState({
    id: true,
    ipAddress: true,
    auCode: true,
    locationId: true,
    mac: true,
    site: true,
    status: true,
  });
  const [density, setDensity] = useState('Normal'); // Default density

  const handleAddRow = () => {
    setIsAdding(true);
    setEditRowId(null);
  };

  const handleSaveRow = () => {
    setRows([...rows, { id: rows.length + 1, ...newRow, status: 'Active' }]);
    setNewRow({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
    setIsAdding(false);
  };

  const handleCancelRow = () => {
    setNewRow({ ipAddress: '', auCode: '', locationId: '', mac: '', site: '' });
    setIsAdding(false);
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewRow({ ...newRow, [name]: value });
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
    setIsAdding(false);
  };

  const handleEditInputChange = (e) => {
    const { name, value } = e.target;
    setEditRowData({ ...editRowData, [name]: value });
  };

  const handleSaveEditRow = () => {
    setRows(rows.map(row => (row.id === editRowId ? editRowData : row)));
    setEditRowId(null);
  };

  const handleCancelEditRow = () => {
    setEditRowId(null);
    setEditRowData({});
  };

  const handleChangePage = (pageNumber) => {
    setCurrentPage(pageNumber);
  };

  const handleRowsPerPageChange = (e) => {
    setRowsPerPage(Number(e.target.value));
    setCurrentPage(1);
  };

  const handleToggleColumnVisibility = (column) => {
    setColumnVisibility((prev) => ({ ...prev, [column]: !prev[column] }));
  };

  const handleSetDensity = (densityOption) => {
    setDensity(densityOption);
  };

  const densityOptions = ['Compact', 'Normal', 'Dense'];

  const indexOfLastRow = currentPage * rowsPerPage;
  const indexOfFirstRow = indexOfLastRow - rowsPerPage;
  const currentRows = rows.slice(indexOfFirstRow, indexOfLastRow);

  return (
    <div>
      <div className="table-controls">
        <div className="table-control-buttons">
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('id')}>
              ID {columnVisibility.id ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('ipAddress')}>
              IP Address {columnVisibility.ipAddress ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('auCode')}>
              AU Code {columnVisibility.auCode ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('locationId')}>
              Location ID {columnVisibility.locationId ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('mac')}>
              MAC {columnVisibility.mac ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('site')}>
              Site {columnVisibility.site ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={() => handleToggleColumnVisibility('status')}>
              Status {columnVisibility.status ? <FaEye /> : <FaEyeSlash />}
            </button>
          </div>
          <div className="dropdown">
            <button onClick={handleSetDensity}>
              Density: {density}
            </button>
            <select className="dropdown-select" value={density} onChange={(e) => handleSetDensity(e.target.value)}>
              {densityOptions.map(option => (
                <option key={option} value={option}>{option}</option>
              ))}
            </select>
          </div>
        </div>
        <div>
          <button onClick={handleAddRow}>Add Record</button>
        </div>
      </div>
      <table className={`table ${density.toLowerCase()}`}>
        <thead>
          <tr>
            {columnVisibility.id && <th>ID</th>}
            {columnVisibility.ipAddress && <th>IP Address</th>}
            {columnVisibility.auCode && <th>AU Code</th>}
            {columnVisibility.locationId && <th>Location ID</th>}
            {columnVisibility.mac && <th>MAC</th>}
            {columnVisibility.site && <th>Site</th>}
            {columnVisibility.status && <th>Status</th>}
          </tr>
        </thead>
        <tbody>
          {currentRows.map((row) => (
            <tr key={row.id}>
              {columnVisibility.id && <td>{row.id}</td>}
              {columnVisibility.ipAddress && <td>{row.ipAddress}</td>}
              {columnVisibility.auCode && <td>{row.auCode}</td>}
              {columnVisibility.locationId && <td>{row.locationId}</td>}
              {columnVisibility.mac && <td>{row.mac}</td>}
              {columnVisibility.site && <td>{row.site}</td>}
              {columnVisibility.status && <td>{row.status}</td>}
            </tr>
          ))}
          {isAdding && (
            <tr>
              {columnVisibility.id && <td>{rows.length + 1}</td>}
              {columnVisibility.ipAddress && <td><input type="text" name="ipAddress" value={newRow.ipAddress} onChange={handleInputChange} /></td>}
              {columnVisibility.auCode && <td><input type="text" name="auCode" value={newRow.auCode} onChange={handleInputChange} /></td>}
              {columnVisibility.locationId && <td><input type="text" name="locationId" value={newRow.locationId} onChange={handleInputChange} /></td>}
              {columnVisibility.mac && <td><input type="text" name="mac" value={newRow.mac} onChange={handleInputChange} /></td>}
              {columnVisibility.site && <td><input type="text" name="site" value={newRow.site} onChange={handleInputChange} /></td>}
            </tr>
          )}
        </tbody>
      </table>
      <div className="pagination-controls">
        <div>
          {isAdding && (
            <>
              <button onClick={handleSaveRow}>Save</button>
              <button onClick={handleCancelRow}>Cancel</button>
            </>
          )}
          {editRowId && (
            <>
              <button onClick={handleSaveEditRow}>Save</button>
              <button onClick={handleCancelEditRow}>Cancel</button>
            </>
          )}
        </div>
        <div>
          <select value={rowsPerPage} onChange={handleRowsPerPageChange}>
            <option value={5}>5</option>
            <option value={10}>10</option>
            <option value={15}>15</option>
            <option value={20}>20</option>
          </select>
          {Array.from({ length: Math.ceil(rows.length / rowsPerPage) }, (_, index) => (
            <button
              key={index}
              onClick={() => handleChangePage(index + 1)}
              disabled={currentPage === index + 1}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

export default TableWithAddEditRow;

import React, { useState, useEffect } from 'react';
import {
  FaPlus,
  FaEdit,
  FaArrowsAlt,
  FaTrash,
  FaSave,
  FaTimes,
  FaSort,
  FaColumns,
  FaLayerGroup,
  FaSearch,
  FaEye,
  FaDownload,
} from 'react-icons/fa';
import './TableWithAddEditRow.css';

const generateDummyData = () => {
  const dummyData = [];
  for (let i = 1; i <= 50; i++) {
    dummyData.push({
      id: i,
      ipAddress: `192.168.1.${i}`,
      assetType: `Camera ${i}`,
      locationId: `Location ${i}`,
      site: `Site ${i}`,
      assetLifeCycleState: i % 2 === 0 ? 'Installed' : 'Active',
      operationalState: i % 3 === 0 ? 'Enabled' : 'Disabled',
      schedulerTaskState: i % 6 === 0 ? 'scheduled' : 'draft',
    });
  }
  return dummyData;
};

const AssetTable = () => {
  const [rows, setRows] = useState([]);
  const [newRow, setNewRow] = useState({});
  const [editRowId, setEditRowId] = useState(null);
  const [editRowData, setEditRowData] = useState({});
  const [showNewRowInput, setShowNewRowInput] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortDirection, setSortDirection] = useState('asc');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [columnVisibility, setColumnVisibility] = useState({
    ipAddress: true,
    assetType: true,
    locationId: false,
    site: false,
    assetLifeCycleState: true,
    operationalState: false,
    schedulerTaskState: true,
  });
  const [searchTerm, setSearchTerm] = useState('');
  const [showSearch, setShowSearch] = useState(false);
  const [selectAll, setSelectAll] = useState(false);
  const [selectedRows, setSelectedRows] = useState([]);
  const [showPreview, setShowPreview] = useState(false);
  const [rowHeight, setRowHeight] = useState('normal');

  useEffect(() => {
    const initialData = generateDummyData();
    setRows(initialData);
  }, []);

  const handleInputChange = (e, setFunction) => {
    const { name, value } = e.target;
    setFunction((prev) => ({ ...prev, [name]: value }));
  };

  const handleAddRow = (index) => {
    setShowNewRowInput(index);
    setNewRow({});
  };

  const handleSaveNewRow = () => {
    setRows((prev) => {
      const newRows = [...prev];
      newRows.splice(showNewRowInput + 1, 0, { id: prev.length + 1, ...newRow });
      return newRows;
    });
    setShowNewRowInput(false);
  };

  const handleEditRow = (row) => {
    setEditRowId(row.id);
    setEditRowData(row);
  };

  const handleSaveEditRow = () => {
    setRows((prev) => prev.map((row) => (row.id === editRowId ? editRowData : row)));
    setEditRowId(null);
  };

  const handleDeleteRow = (rowId) => {
    setRows((prev) => prev.filter((row) => row.id !== rowId));
  };

  const handleSort = (column) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortColumn(column);
      setSortDirection('asc');
    }
  };

  const applySort = (data) => {
    if (sortColumn && sortDirection) {
      return [...data].sort((a, b) => {
        const columnA = a[sortColumn];
        const columnB = b[sortColumn];
        if (sortDirection === 'asc') {
          if (columnA < columnB) return -1;
          if (columnA > columnB) return 1;
          return 0;
        } else {
          if (columnA > columnB) return -1;
          if (columnA < columnB) return 1;
          return 0;
        }
      });
    }
    return data;
  };

  const handleChangePage = (page) => {
    setCurrentPage(page);
  };

  const handleColumnVisibilityChange = (column) => {
    setColumnVisibility((prev) => ({ ...prev, [column]: !prev[column] }));
  };

  const handleToggleSearch = () => {
    setShowSearch(!showSearch);
    setSearchTerm('');
  };

  const handleSearch = () => {
    if (!searchTerm) return rows;
    return rows.filter((row) =>
      Object.values(row).some(
        (value) =>
          typeof value === 'string' && value.toLowerCase().includes(searchTerm.toLowerCase())
      )
    );
  };

  const handleSelectRow = (rowId) => {
    const index = selectedRows.indexOf(rowId);
    if (index === -1) {
      setSelectedRows((prev) => [...prev, rowId]);
    } else {
      setSelectedRows((prev) => prev.filter((id) => id !== rowId));
    }
  };

  const handleSelectAllRows = () => {
    if (selectAll) {
      setSelectedRows([]);
    } else {
      setSelectedRows(rows.map((row) => row.id));
    }
    setSelectAll(!selectAll);
  };

  const filteredRows = handleSearch();
  const sortedRows = applySort(filteredRows);
  const lastIndex = currentPage * itemsPerPage;
  const firstIndex = lastIndex - itemsPerPage;
  const visibleRows = sortedRows.slice(firstIndex, lastIndex);
  const totalPages = Math.ceil(sortedRows.length / itemsPerPage);

  const handlePreview = () => {
    setShowPreview(true);
  };

  const handleClosePreview = () => {
    setShowPreview(false);
  };

  const handleDownload = () => {
    alert('Implement download functionality');
  };

  const handleItemsPerPageChange = (value) => {
    setItemsPerPage(Number(value));
    setCurrentPage(1);
  };

  const handleDensityChange = (density) => {
    setRowHeight(density);
  };

  return (
    <div>
      <div className="table-controls">
        <button className="preview-btn" onClick={handlePreview}>
          <FaEye /> Preview
        </button>
        <div className="dropdown">
          <button className="dropbtn">
            <FaSort /> Sort
          </button>
          <div className="dropdown-content sort-dropdown">
            {Object.keys(columnVisibility).map((column) =>
              columnVisibility[column] ? (
                <label key={column}>
                  <input
                    type="checkbox"
                    checked={sortColumn === column}
                    onChange={() => handleSort(column)}
                  />{' '}
                  {column}
                </label>
              ) : null
            )}
          </div>
        </div>
        <div className="dropdown">
          <button className="dropbtn">
            <FaColumns /> Manage Columns
          </button>
          <div className="dropdown-content">
            {Object.keys(columnVisibility).map((column) => (
              <label key={column}>
                <input
                  type="checkbox"
                  checked={columnVisibility[column]}
                  onChange={() => handleColumnVisibilityChange(column)}
                />{' '}
                {column}
              </label>
            ))}
          </div>
        </div>
        <div className="dropdown density-dropdown">
          <button className="dropbtn density-btn">
            <FaLayerGroup /> Density
          </button>
          <div className="dropdown-content">
            <select onChange={(e) => handleDensityChange(e.target.value)}>
              <option value="compact">Compact</option>
              <option value="dense">Dense</option>
              <option value="normal">Normal</option>
            </select>
          </div>
        </div>
        <div className="search-container">
          {!showSearch && (
            <button className="search-btn" onClick={handleToggleSearch}>
              <FaSearch /> Search
            </button>
          )}
          {showSearch && (
            <input
              type="text"
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          )}
        </div>
      </div>

      <table className={`asset-table ${rowHeight}`}>
        <thead>
          <tr>
            <th>
              <input
                type="checkbox"
                checked={selectAll}
                onChange={handleSelectAllRows}
              />
            </th>
            {columnVisibility.ipAddress && <th>IP Address</th>}
            {columnVisibility.assetType && <th>Asset Type</th>}
            {columnVisibility.locationId && <th>Location ID</th>}
            {columnVisibility.site && <th>Site</th>}
            {columnVisibility.assetLifeCycleState && <th>Asset Life Cycle State</th>}
            {columnVisibility.operationalState && <th>Operational State</th>}
            {columnVisibility.schedulerTaskState && <th>Scheduler Task State</th>}
            <th>Actions</th>
          </tr>
        </thead>
       <tbody>
          {visibleRows.map((row) => (
            <tr key={row.id}>
              <td>
                <input
                  type="checkbox"
                  checked={selectedRows.includes(row.id)}
                  onChange={() => handleSelectRow(row.id)}
                />
              </td>
              {columnVisibility.ipAddress && <td>{row.ipAddress}</td>}
              {columnVisibility.assetType && <td>{row.assetType}</td>}
              {columnVisibility.locationId && <td>{row.locationId}</td>}
              {columnVisibility.site && <td>{row.site}</td>}
              {columnVisibility.assetLifeCycleState && (
                <td>{row.assetLifeCycleState}</td>
              )}
              {columnVisibility.operationalState && <td>{row.operationalState}</td>}
              {columnVisibility.schedulerTaskState && (
                <td>{row.schedulerTaskState}</td>
              )}
              <td>
                {editRowId === row.id ? (
                  <>
                    <button
                      className="save-btn"
                      onClick={handleSaveEditRow}
                      title="Save"
                    >
                      <FaSave />
                    </button>
                    <button
                      className="cancel-btn"
                      onClick={() => setEditRowId(null)}
                      title="Cancel"
                    >
                      <FaTimes />
                    </button>
                  </>
                ) : (
                  <>
                    <button
                      className="edit-btn"
                      onClick={() => handleEditRow(row)}
                      title="Edit"
                    >
                      <FaEdit />
                    </button>
                    <button
                      className="delete-btn"
                      onClick={() => handleDeleteRow(row.id)}
                      title="Delete"
                    >
                      <FaTrash />
                    </button>
                  </>
                )}
              </td>
            </tr>
          ))}
          {showNewRowInput !== false && (
            <tr>
              <td colSpan={Object.keys(columnVisibility).length + 2}>
                <input
                  type="text"
                  name="ipAddress"
                  placeholder="IP Address"
                  onChange={(e) => handleInputChange(e, setNewRow)}
                />
                <input
                  type="text"
                  name="assetType"
                  placeholder="Asset Type"
                  onChange={(e) => handleInputChange(e, setNewRow)}
                />
                <button className="save-new-row" onClick={handleSaveNewRow}>
                  Save
                </button>
              </td>
            </tr>
          )}
        </tbody>
      </table>
  <div className="pagination">
    <button onClick={() => handleChangePage(currentPage - 1)} disabled={currentPage === 1}>
      Previous
    </button>
    {Array.from({ length: totalPages }, (_, index) => (
      <button key={index} onClick={() => handleChangePage(index + 1)}>
        {index + 1}
      </button>
    ))}
    <button onClick={() => handleChangePage(currentPage + 1)} disabled={currentPage === totalPages}>
      Next
    </button>
  </div>

  {showPreview && (
    <div className="modal">
      <div className="modal-content">
        <span className="close" onClick={handleClosePreview}>
          &times;
        </span>
        <h3>Preview</h3>
        <p>Implement your preview content here.</p>
      </div>
    </div>
  )}

  <div className="download-container">
    <button className="download-btn" onClick={handleDownload}>
      <FaDownload /> Download
    </button>
  </div>
</div> 
);
};

export default AssetTable;

This updated component includes:

- Adjusted column visibility toggles based on your provided headers.
- Updated row structure to match the desired columns.
- Enhanced functionality for sorting, searching, and pagination.
- Proper handling for adding, editing, and deleting rows.
- Improved styling and user interface elements for better usability.

Make sure to adjust the styling (`TableWithAddEditRow.css`) and any additional functionality based on your application's specific requirements.
